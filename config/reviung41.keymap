/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------------------------
// | ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |   GRAVE    |
// | TAB |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    '      |
// | LCTRL & LGUI |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | LALT |
//                        | RSE | SPC | MT(LEFT_SHIFT, RET) | BSPC  | LWR |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp GRAVE
   &kp TAB   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &mt LCTRL LGUI  &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RALT
                        &mo 2 &kp SPC &mt LSHFT RET &kp BSPC &mo 1
                        >;
                };

                lower_layer {
// ----------------------------------------------------------------------------------
// |    |    |    |   |    |    |  |  PG_UP  |  HOME  | UP | END |    | DELETE   |
// |    |  LEFT_GUI  |  LEFT_ALT  |  LEFT_CONTROL  |  LEFT_SHIFT  | "|" |   | PG_Dn | LFT |  DWN | RGT |     |       |
// |    |  |  |  | |    |   | |  | | | | RET |
//                       | ADJ  |     | MT(LEFT_SHIFT, RET) |  |     |
                        bindings = <
   &trans &none  &none      &none &none &none      &kp PG_UP &kp HOME &kp UP    &kp END  &none  &kp DEL
   &trans &kp LGUI &kp LALT &kp LCTRL &kp LSHFT &none     &kp PG_DN  &kp LEFT &kp DOWN    &kp RIGHT &none &none
   &mo 3 &none   &none    &none &none &none        &none  &none  &none &none &none &kp RET
                                 &trans      &trans       &trans        &trans       &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |    |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  BACKSPACE   |
// |    |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |     |
// |    |  _  |  +  |  -  |  =  |  |  |   |  \  |  [  |  ]  |  {  |  }  |  RETURN   |
//                       |     |  | MT(LEFT_SHIFT, RET) |    | ADJ |
                        bindings = <
   &trans &kp EXCL &kp AT &kp HASH &kp DLLR &kp PERCENT        &kp CARET &kp AMPS &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &trans &kp N1 &kp N2 &kp N3  &kp N4  &kp N5      &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &none 
   &trans &kp UNDER   &kp PLUS  &kp MINUS  &kp EQUAL  &kp PIPE       &kp BACKSLASH    &kp LBKT     &kp RBKT    &kp LBRC   &kp RBRC   &mo 3
                                &trans      &trans       &trans        &trans      &trans
                        >;
                };

                adjust_layer {
// -----------------------------------------------------------------------------------------
// | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | RGB TOG |   |  BT1  | BT2 | BT3 | BT4 | BT5 | BT CLR |
// | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI+ |    |         |   |  BT_NEXT     | BT_PREV    | BRIGHT UP    | BRIGHT DOWN    | VOL DOWN    | VOL UP       |
// | Toggle BLE    | SLEEP MODE | POWER OFF | POWER OFF (C) |    |         |   | RESET |     |     |     |     |        |
//                                              |     |     |     |     |     |
                        bindings = <
   &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &none &rgb_ug RGB_TOG    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
   &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &none &none             &bt BT_NXT        &bt BT_PRV        &kp C_BRI_DN &kp C_BRI_UP &kp C_VOL_DN &kp C_VOL_UP
   &trans	           &out OUT_BLE           &out OUT_USB           &out OUT_TOG           &none &reset              &kp C_PREV       &kp C_PP        &kp C_NEXT       &none        &none        &none
                                                             &trans      &trans       &trans    &trans      &trans
                        >;
                };
        };
};
